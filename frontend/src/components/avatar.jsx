/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/678f9ea219e4e31ec35e1612.glb -o src/components/avatar.jsx -r public 
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGraph } from '@react-three/fiber'
import { useAnimations, useFBX,useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

export function Avatar(props) {
  const { scene } = useGLTF('/models/678f9ea219e4e31ec35e1612.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const {animations: idle} = useFBX("/animations/Sitting Idle.fbx");
  const {animations: talking} = useFBX("/animations/Sitting Talking.fbx");


  idle[0].name = "idle";
  talking[0].name = "talking";
  
  const [animation, setAnimation] = useState("idle");

  const group = useRef();

  const {actions} = useAnimations(
    [idle[0],talking[0]], group
  )

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => actions[animation].fadeOut(0.5);
  },[animation])

  console.log(idle); 

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh name="Wolf3D_Avatar" geometry={nodes.Wolf3D_Avatar.geometry} material={materials.Wolf3D_Avatar} skeleton={nodes.Wolf3D_Avatar.skeleton} morphTargetDictionary={nodes.Wolf3D_Avatar.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Avatar.morphTargetInfluences} />
    </group>
  )
}

useGLTF.preload('/models/678f9ea219e4e31ec35e1612.glb')
